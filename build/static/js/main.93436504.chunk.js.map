{"version":3,"sources":["component/Employee.js","component/Form1.js","component/Reset1.js","App.js","serviceWorker.js","index.js"],"names":["Employee","react_default","a","createElement","className","this","props","id","src","avatar","alt","first_name","last_name","email","error","reset","React","Component","Form1","state","selecteddepartment","selectedid","handleChange","_this","setState","console","log","handleChange1","clearvalues","onClearForm","window","location","reload","customStyles","option","styles","Object","objectSpread","color","isSelected","backgroundColor","borderBottom","&:hover","control","boxShadow","isFocused","borderColor","onSubmit","getDetails","name","react_select_browser_esm","value","onChange","options","label","placeholder","autoFocus","type","onClick","Reset1","Promise","resolve","setTimeout","react_final_form_es","render","_ref","handleSubmit","submitting","event","promise","then","disabled","App","department","undefined","_callee","e","api_call","response","regenerator_default","wrap","_context","prev","next","target","elements","preventDefault","fetch","concat","sent","json","data","stop","component_Form1","component_Reset1","component_Employee","Boolean","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93436504.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Employee extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"employee-info\">\r\n                {\r\n                    this.props.id && <p className=\"employee__profilepickey\"> Profile Picture:<br />\r\n                        <span> <img src={this.props.avatar} alt=\"profilepic\" className=\"employee__image\" /> </span>\r\n                    </p>\r\n                }\r\n\r\n                {\r\n                    this.props.id && <span className=\"employee__idkey\">ID:\r\n                        <span className=\"employee__idvalue\">  {this.props.id}</span>\r\n                    </span>\r\n                }\r\n\r\n\r\n                {\r\n                    this.props.first_name && <span className=\"employee__namekey\">Name:\r\n                        <span className=\"employee__value1\">  {this.props.first_name}</span>\r\n                    </span>\r\n                }\r\n\r\n                {\r\n                    this.props.last_name && <span>\r\n                        <span className=\"employee__value1\">  {this.props.last_name}<br /></span>\r\n                    </span>\r\n                }\r\n\r\n                {\r\n                    this.props.email && <p className=\"employee__emailkey\">Email:\r\n                        <span className=\"employee__emailvalue\">  {this.props.email}</span>\r\n                    </p>\r\n                }\r\n\r\n                {\r\n                    this.props.error && <p className=\"employee__error\">{this.props.error}</p>\r\n                }\r\n                {\r\n                    this.props.reset && <p className=\"employee__reset\">\r\n                        {\r\n                            this.props.reset\r\n                        }\r\n                    </p>\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Employee;","import React from \"react\";\r\nimport Select from 'react-select';\r\n\r\n\r\nclass Form1 extends React.Component {\r\n\r\n    state = {\r\n        selecteddepartment: null,\r\n        selectedid: null,\r\n\r\n    };\r\n\r\n\r\n    handleChange = selecteddepartment => {\r\n        this.setState({ selecteddepartment });\r\n        console.log(`Option selected:`, selecteddepartment);\r\n    };\r\n\r\n    handleChange1 = selectedid => {\r\n        this.setState({ selectedid });\r\n        console.log(`Option selected:`, selectedid);\r\n    };\r\n\r\n    clearvalues = () => {\r\n        this.setState({\r\n            selecteddepartment: \"\",\r\n            selectedid: \"\"\r\n        });\r\n    }\r\n    onClearForm = () => {\r\n        window.location.reload();\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n\r\n\r\n        const DepartmentOptions = [\r\n            { value: 'hr', label: 'HR' },\r\n            { value: 'engineer', label: 'Engineer' },\r\n\r\n        ];\r\n        const IdOptions = [\r\n            { value: '1', label: '1' },\r\n            { value: '2', label: '2' },\r\n            { value: '3', label: '3' },\r\n            { value: '4', label: '4' },\r\n            { value: '5', label: '5' },\r\n            { value: '6', label: '6' },\r\n            { value: '7', label: '7' },\r\n            { value: '8', label: '8' },\r\n            { value: '9', label: '9' },\r\n            { value: '10', label: '10' },\r\n            { value: '11', label: '11' },\r\n            { value: '12', label: '12' },\r\n\r\n        ];\r\n        const { selecteddepartment } = this.state;\r\n        const { selectedid } = this.state;\r\n\r\n\r\n\r\n        const customStyles = {\r\n            option: (styles, state) => ({\r\n                ...styles,\r\n                color: state.isSelected ? \"#FFF\" : styles.color,\r\n                backgroundColor: state.isSelected ? \"#c7bdf2\" : styles.color,\r\n                borderBottom: \"1px solid rgba(0, 0, 0, 0.125)\",\r\n                \"&:hover\": {\r\n                    color: \"#FFF\",\r\n                    backgroundColor: \"#c7bdf2\"\r\n                }\r\n            }),\r\n            control: (styles, state) => ({\r\n                ...styles,\r\n                boxShadow: state.isFocused ? \"0 0 0 0.2rem rgba(120, 194, 173, 0.25)\" : 0,\r\n                borderColor: state.isFocused ? \"#bcebeb\" : \"#CED4DA\",\r\n                \"&:hover\": {\r\n                    borderColor: state.isFocused ? \"#bcebeb\" : \"#CED4DA\"\r\n                }\r\n            })\r\n        };\r\n\r\n\r\n        return (\r\n\r\n\r\n            <form onSubmit={this.props.getDetails} id=\"myform\" name=\"myform\" >\r\n                <p className=\"Title\" >Employee Details</p>\r\n                <Select styles={customStyles}\r\n                    className=\"selectbox1\" value={selecteddepartment} onChange={this.handleChange} options={DepartmentOptions}\r\n                    name=\"department\" placeholder=\"Select Department\" autoFocus=\"render\"\r\n                />\r\n                &nbsp;\r\n                <Select styles={customStyles}\r\n                    className=\"selectbox2\" value={selectedid} onChange={this.handleChange1} options={IdOptions} name=\"id\"\r\n                    placeholder=\"Select Employee ID\"\r\n\r\n                />\r\n                <button type=\"submit\" className=\"button1\">Get Details</button>\r\n                &nbsp;&nbsp; &nbsp; &nbsp;\r\n                <input type=\"button\" name=\"cancelCourse\" value=\"Clear Values\" onClick={this.clearvalues} className=\"button1\" />\r\n                &nbsp;&nbsp; &nbsp; &nbsp;\r\n                <input type=\"button\" name=\" onClearForm\" value=\"Clear Form\" onClick={this.onClearForm} className=\"button1\" />\r\n\r\n\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form1;","import React, { Component } from 'react';\r\nimport { Form } from \"react-final-form\";\r\n\r\n\r\nclass Reset1 extends Component {\r\n\r\n    onSubmit = () => {\r\n        return new Promise(resolve => {\r\n            setTimeout(resolve, 2000);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form\r\n                    onSubmit={this.onSubmit}\r\n                    render={({ handleSubmit, submitting, reset }) => (\r\n                        <form onSubmit={event => {\r\n                            const promise = handleSubmit(event);\r\n                            console.log('RESETING', promise);\r\n                            promise.then(() => {\r\n                                reset();\r\n                                //this.props.dispatch(setSomeVar(selectbox1));\r\n\r\n                            })\r\n                            return promise;\r\n                        }}>\r\n\r\n                            <input type=\"submit\" disabled={submitting} value={submitting ? 'Loading.....' : 'RESET'} />\r\n                        </form>\r\n                    )}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Reset1;\r\n","import React from \"react\";\nimport Employee from \"./component/Employee\";\nimport Form1 from \"./component/Form1\";\nimport Reset1 from \"./component/Reset1\";\n\nclass App extends React.Component {\n\n  state = {\n\n    department: undefined,\n    avatar: undefined,\n    id: undefined,\n    first_name: undefined,\n    last_name: undefined,\n    email: undefined,\n    error: undefined\n  }\n\n\n  getDetails = async (e) => {\n\n    const department = e.target.elements.department.value;\n    const id = e.target.elements.id.value;\n    e.preventDefault();\n    const api_call = await fetch(`https://reqres.in/api/users/?id=${id}`);\n    //https://reqres.in/api/users/?id=${id}\n    const response = await api_call.json();\n    console.log(response);\n    if (department && id) {\n      this.setState({\n        avatar: response.data.avatar,\n        id: response.data.id,\n        first_name: response.data.first_name,\n        last_name: response.data.last_name,\n        email: response.data.email,\n        error: \"\"\n      })\n    } else {\n      this.setState({\n        error: \"Please input search values...\"\n      })\n    }\n  }\n\n  render() {\n\n    return (\n\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form1 getDetails={this.getDetails} />\n                  <Reset1 onSubmit={this.onSubmit}/>\n                  <Employee\n                    avatar={this.state.avatar}\n                    id={this.state.id}\n                    first_name={this.state.first_name}\n                    last_name={this.state.last_name}\n                    email={this.state.email}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}